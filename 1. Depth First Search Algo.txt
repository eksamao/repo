class Graph:
    def __init__(self):
        self.graph = {}
    def add_edge(self, node, neighbor):
        if node not in self.graph:
            self.graph[node] = []
        if neighbor not in self.graph:
            self.graph[neighbor] = []
        self.graph[node].append(neighbor)
        self.graph[neighbor].append(node)
    def dfs(self, start):
        visited = set()
        self._dfs_util(start, visited)
    def _dfs_util(self, node, visited):
        visited.add(node)
        print(node)
        for neighbor in self.graph[node]:
            if neighbor not in visited:
                self._dfs_util(neighbor, visited)
g = Graph()
g.add_edge('A', 'B')
g.add_edge('A', 'C')
g.add_edge('B', 'D')
g.add_edge('B', 'E')
g.add_edge('C', 'F')
g.add_edge('E', 'F')
start_node = 'A'
g.dfs(start_node)
